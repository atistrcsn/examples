namespace ColossalCave;

import java.util.*
import java.io.*

class World() {
  class Room(val name: String) {
    public val west: Room? get() = null
    public val east: Room? get() = null

    public val world: World get() = this@World
  }

  public val items = new ArrayList<Item>

  class Item(val name: String, var room: Room) {
    {
      items.add(this)
    }
  }

  fun describeRoom(room: Room) {
    System.out?.println(room.name)
    for(val anItem: Any? in items) {
      val item = anItem as Item
      if (item.room === room) {
        System.out?.println("You see " + item.name)
      }
    }
  }

  public val atEndOfRoad = new AtEndOfRoad()
  public val atHillInRoad = new AtHillInRoad()
  public val insideBuilding = new InsideBuilding()

  public val brassLantern = new BrassLantern()

  class AtEndOfRoad(): Room("At End of Road") {
    public val west: Room? get() = atHillInRoad
    public val east: Room? get() = insideBuilding
  }

  class AtHillInRoad(): Room("At Hill in Road") {
    public val east: Room? get() = atEndOfRoad
  }

  class InsideBuilding(): Room("Inside Building") {
    public val west: Room? get() = atHillInRoad
  }

  class BrassLantern(): Item("Brass Lantern", insideBuilding) {
  }

  fun startRoom() = atEndOfRoad
}

class Player(var room: World.Room) {

}

class Command {
  abstract fun execute(p: Player): Unit
}

class QuitCommand() : Command {
  fun execute(p: Player): Unit {
    System.exit(0)
  }
}

class MoveCommand: Command {
  fun moveTo(p: Player, room: World.Room?) {
    if (room === null) {
      System.out?.println("You can't go that way")
      return
    }
    p.room = room as World.Room
    room?.world.describeRoom(p.room)
  }
}

class WestCommand(): MoveCommand {
  fun execute(p: Player): Unit {
    moveTo(p, p.room.west)
  }
}

class EastCommand(): MoveCommand {
  fun execute(p: Player): Unit {
    moveTo(p, p.room.east)
  }
}

fun parse(cmd: String): Command? {
  if (cmd == "quit") return new QuitCommand()
  if (cmd == "west") return new WestCommand()
  if (cmd == "east") return new EastCommand()
  return null
}

fun main(args: Array<String>) {
  val w = new World()
  val p = new Player(w.startRoom())
  System.out?.println(p.room.name)
  val reader = new BufferedReader(new InputStreamReader(System.`in`))
  while(true) {
    System.out?.print("> ")
    val cmd = reader.readLine() as String
    val command = parse(cmd)
    if (command === null)
      System.out?.println("Unrecognized command");
    else
      command?.execute(p)
  }
}
